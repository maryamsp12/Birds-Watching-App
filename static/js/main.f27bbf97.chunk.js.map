{"version":3,"sources":["fakeObservations/fakeCategory.jsx","fakeObservations/fakeObservations.jsx","components/pagination.jsx","components/listGroup.jsx","components/observationsTable.jsx","components/observations.jsx","components/paginate.js","components/input.jsx","components/select.jsx","components/form.jsx","components/formInputs.jsx","components/notFound.jsx","navBar.jsx","App.js","serviceWorker.js","index.js"],"names":["category","_id","name","getCategory","filter","g","observations","description","date","Pagination","props","ObservationsCount","pageSize","currentPage","pagesCount","onPageChange","Math","ceil","pages","_","range","react_default","a","createElement","className","map","page","key","onClick","ListGroup","listCategory","onCategorySelect","selectedCategory","item","ObservationsTable","_this$props","this","handleDelete","handleSort","handleSortIcon","observation","Component","Observations","state","sortColumn","path","order","sortDirection","_this","m","setState","handlePageChange","handleCategorySelect","Category","Object","objectSpread","column","concat","toConsumableArray","count","length","_this$state","allObservations","filtered","items","pageNumber","startIndex","slice","take","value","paginate","orderBy","listGroup","observationsTable","pagination","Input","_ref","label","onChange","type","htmlFor","id","Select","options","rest","objectWithoutProperties","assign","option","Form","data","doSubmit","obs","find","categoryAPI","Date","toLocaleString","now","toString","push","saveObservation","console","log","history","match","params","onSubmit","handleSubmit","renderInput","renderSelect","renderButton","e","preventDefault","handleChange","input","currentTarget","class","arguments","undefined","components_input","components_select","NotFound","NavBar","Link","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","NavLink","App","navBar","Route","component","Redirect","from","exact","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f27bbf97.chunk.js","sourcesContent":["export const category = [\r\n    { _id: \"common\", name: \"Common\" },\r\n    { _id: \"rare\", name: \"Rare\" },\r\n    { _id: \"eRare\", name: \"Extremely Rare\" }\r\n];\r\n\r\nexport function getCategory() {\r\n    return category.filter(g => g);\r\n}\r\n\r\n\r\n","import * as categoryAPI from \"./fakeCategory\";\n\nconst observations = [\n    {\n        _id: \"1\",\n        name: \"Goshawk\",\n        category: { _id: \"rare\", name: \"Rare\" },\n        description: \"The northern goshawk is a medium-large raptor in the family Accipitridae.\",\n        date: \"2/14/2019, 9:53:00 AM\"\n    },\n    {\n        _id: \"2\",\n        name: \"Mallard\",\n        category: { _id: \"eRare\", name: \"Extremely Rare\" },\n        description: \"Thin-bodied, medium-sized white or dark heron, with long, thin neck and bill, dark legs.\",\n        date: \"2/15/2019, 12:55:56 PM\"\n    },\n    {\n        _id: \"3\",\n        name: \"Peregrine\",\n        category: { _id: \"eRare\", name: \"Extremely Rare\" },\n        description: \"The northern goshawk is a medium-large raptor in the family Accipitridae.\",\n        date: \"2/11/2019, 9:53:00 AM\"\n    },\n    {\n        _id: \"4\",\n        name: \"Falcon\",\n        category: { _id: \"common\", name: \"Common\" },\n        description: \"The peregrine falcon, also known as the peregrine, alconidae.\",\n        date: \"2/16/2019, 12:55:56 PM\"\n    },\n    {\n        _id: \"5\",\n        name: \"Peregrine\",\n        category: { _id: \"eRare\", name: \"Extremely Rare\" },\n        description: \"The northern goshawk is a medium-large raptor in the family Accipitridae.\",\n        date: \"2/16/2019, 9:53:00 AM\"\n    },\n    {\n        _id: \"6\",\n        name: \"Falcon\",\n        category: { _id: \"common\", name: \"Common\" },\n        description: \"The peregrine falcon, also known as the peregrine, alconidae.\",\n        date: \"2/14/2019, 12:55:56 PM\"\n    },\n    {\n        _id: \"7\",\n        name: \"Peregrine\",\n        category: { _id: \"eRare\", name: \"Extremely Rare\" },\n        description: \"The northern goshawk is a medium-large raptor in the family Accipitridae.\",\n        date: \"2/16/2019, 9:53:00 AM\"\n    },\n    {\n        _id: \"8\",\n        name: \"Falcon\",\n        category: { _id: \"common\", name: \"Common\" },\n        description: \"The peregrine falcon, also known as the peregrine, alconidae.\",\n        date: \"2/14/2019, 12:55:56 PM\"\n    }\n\n];\n\nexport function getObservations() {\n    return observations;\n}\n\nexport function getObservation(id) {\n    return observations.find(m => m._id === id);\n  }\n  \n  export function saveObservation(observation) {\n    let obs = observations.find(m => m._id === observation._id) || {};\n    obs.name = observation.name;\n    obs.category = categoryAPI.category.find(g => g._id === observation.category);\n    obs.description = observation.description;\n    obs.date = new Date().toLocaleString();\n  \n    if (!obs._id) {\n      obs._id = Date.now().toString();\n      observations.push(obs);\n    }\n  \n    return obs;\n  }","import React, { Component } from 'react';\r\nimport _ from 'lodash'\r\n\r\nconst Pagination = props => {\r\n    const { ObservationsCount, pageSize, currentPage, onPageChange } = props;\r\n\r\n    const pagesCount = Math.ceil(ObservationsCount / pageSize);\r\n    if (pagesCount === 1) return null;\r\n    const pages = _.range(1, pagesCount + 1);\r\n\r\n    return <nav>\r\n        <ul className='pagination'>\r\n            {pages.map(page => (<li key={page} className={page === currentPage ? 'page-item active' : 'page-item'}>\r\n                <a onClick={() => props.onPageChange(page)} className='page-link'>\r\n                    {page}\r\n                </a>\r\n            </li>\r\n            ))}\r\n        </ul>\r\n    </nav>\r\n}\r\n\r\nexport default Pagination;","import React, { Component } from 'react';\r\n\r\nconst ListGroup = (props) => {\r\n    const { listCategory, onCategorySelect, selectedCategory } = props\r\n\r\n    return (\r\n        <div>\r\n            <ul className=\"list=group\">\r\n            {listCategory.map(item => (\r\n                <li onClick={()=>onCategorySelect(item)} \r\n                    key={item._id} \r\n                    className={item === selectedCategory ? 'list-group-item clickable active' : 'list-group-item clickable'}                    \r\n                    >\r\n                    {item.name}\r\n                </li>\r\n            ))}\r\n            </ul>\r\n        </div>);\r\n}\r\n\r\nexport default ListGroup;","import React, { Component } from 'react';\r\n\r\nclass ObservationsTable extends Component {\r\n\r\n  \r\n\r\n    render() {\r\n        const { observations, handleDelete, handleSort, handleSortIcon } = this.props\r\n\r\n        return (<table className='table'>\r\n            <thead>\r\n                <tr className='clickable'>\r\n                    <th onClick={() => handleSort('name')}> Name {handleSortIcon()}</th>\r\n                    <th> Found </th>\r\n                    <th>Description</th>\r\n                    <th onClick={() => handleSort('date')}>Date {handleSortIcon()}</th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {observations.map(observation => (<tr key={observation._id}>\r\n                    <td>{observation.name}</td>\r\n                    <td>{observation.category && observation.category.name}</td>\r\n                    <td>{observation.description}</td>\r\n                    <td>{observation.date}</td>\r\n                    <td><button onClick={() => handleDelete(observation)} className='btn btn-danger btn-sm'>Delete</button></td>\r\n                </tr>\r\n                ))}\r\n\r\n            </tbody>\r\n\r\n        </table>);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ObservationsTable;","import React, { Component } from 'react';\r\nimport { getObservations } from './../fakeObservations/fakeObservations';\r\nimport { getCategory } from './../fakeObservations/fakeCategory';\r\nimport Pagination from './pagination';\r\nimport { paginate } from './paginate';\r\nimport ListGroup from './listGroup';\r\nimport ObservationsTable from './observationsTable';\r\nimport _ from 'lodash'\r\n\r\n\r\n\r\nclass Observations extends Component {\r\n    state = {\r\n        observations: [],\r\n        category: [],\r\n        pageSize: 4,\r\n        currentPage: 1,\r\n        selectedCategory: null,\r\n        sortColumn: { path: 'date', order: 'desc' },\r\n        sortDirection: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        const category = [{ _id: '', name: 'All Observations' }, ...getCategory()]\r\n        this.setState({ observations: getObservations(), category: category })\r\n    }\r\n\r\n    handleDelete = (observation) => {\r\n        const observations = this.state.observations.filter(m => m._id !== observation._id)\r\n        this.setState({ observations })\r\n    }\r\n    handlePageChange = (page) => {\r\n        this.setState({ currentPage: page })\r\n    }\r\n\r\n    handleCategorySelect = (Category) => {\r\n        this.setState({ selectedCategory: Category, currentPage: 1 })\r\n    }\r\n    handleSort = path => {\r\n        const sortColumn = { ...this.state.sortColumn }\r\n        if (sortColumn.path === path)\r\n            sortColumn.order = (sortColumn.order === 'asc') ? 'desc' : 'asc';\r\n        else {\r\n            sortColumn.path = path;\r\n            sortColumn.order = 'asc';\r\n        }\r\n        this.setState({ sortColumn })\r\n    }\r\n    \r\n    handleSortIcon = (column) => {\r\n        if (this.state.sortColumn.order === \"asc\") return <i className='fa  fa-sort-asc' />\r\n        return <i className='fa fa-sort-desc' />\r\n    }\r\n\r\n\r\n    render() {\r\n        const { length: count } = this.state.observations\r\n        const { pageSize, currentPage, selectedCategory, sortColumn, observations: allObservations } = this.state\r\n\r\n        if (count === 0)\r\n            return <p>There are no observations in the local Storage. </p>\r\n\r\n        const filtered = selectedCategory && selectedCategory._id\r\n            ? allObservations.filter(m => m.category._id === selectedCategory._id)\r\n            : allObservations;\r\n\r\n        const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order])\r\n\r\n        const observations = paginate(sorted, currentPage, pageSize)\r\n\r\n\r\n        return (\r\n            <div className='row'>\r\n                <div className='col-3'>\r\n                    <ListGroup listCategory={this.state.category}\r\n                        selectedCategory={this.state.selectedCategory}\r\n                        onCategorySelect={this.handleCategorySelect} />\r\n                </div>\r\n                <div className='col'> <p>There are {filtered.length}  Observation recorded.</p>\r\n                    <ObservationsTable handleDelete={this.handleDelete}\r\n                        observations={observations}\r\n                        handleSort={this.handleSort}\r\n                        handleSortIcon={this.handleSortIcon} />\r\n                    <Pagination ObservationsCount={filtered.length}\r\n                        pageSize={pageSize}\r\n                        onPageChange={this.handlePageChange}\r\n                        currentPage={currentPage} />\r\n                </div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Observations;","import _ from 'lodash'\r\n\r\nexport function paginate (items, pageNumber, pageSize) {\r\n    const startIndex = (pageNumber - 1) * pageSize\r\n    return _(items)\r\n    .slice(startIndex)\r\n    .take(pageSize)\r\n    .value()\r\n}","import React from 'react';\r\n\r\nconst Input = ({ name, label, value, onChange, type }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}> {label} </label>\r\n                <input  \r\n                    value={value}\r\n                    onChange={onChange}\r\n                    id={name}\r\n                    name={name}\r\n                    type={type}\r\n                    className=\"form-control\"\r\n                />\r\n        </div>\r\n    )\r\n}\r\nexport default Input","import React from \"react\";\r\n\r\nconst Select = ({ name, label, options, ...rest }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <select name={name} id={name} {...rest} className=\"form-control\">\r\n        <option value=\"\" />\r\n        {options.map(option => (\r\n          <option key={option._id} value={option._id}>\r\n            {option.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React from 'react';\r\nimport FormInputs from './formInputs'\r\nimport { saveObservation } from './../fakeObservations/fakeObservations';\r\nimport { getCategory } from './../fakeObservations/fakeCategory';\r\n\r\n\r\nclass Form extends FormInputs {\r\n    state = {\r\n        data: { name: '', category: '', description: '', date: '' },\r\n        category: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        const category = getCategory()\r\n        this.setState({ category })\r\n\r\n        const observationId = this.props.match.params.id; //\r\n        if (observationId === 'new') return; //\r\n    }\r\n    \r\n    doSubmit = () => {\r\n        if (this.state.data.name !== '' && this.state.data.category !== '' && this.state.data.description !== ''){\r\n        saveObservation(this.state.data)\r\n        console.log(this.state.data)\r\n        this.props.history.push('/observations')}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Observation Form</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {this.renderInput('name', 'Name*')}\r\n                    {this.renderSelect('category', 'Category*', this.state.category)}\r\n                    {this.renderInput('description', 'Description*')}\r\n                    {this.renderButton(\"Save\")}\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport Input from \"./input\"\r\nimport Select from \"./select\"\r\n\r\nclass FormInputs extends Component {\r\n    state = {\r\n        data: {}\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.doSubmit()\r\n    }\r\n\r\n    handleChange = ({ currentTarget: input }) => {\r\n        const data = { ...this.state.data }\r\n        data[input.name] = input.value\r\n        this.setState({ data })\r\n    }\r\n\r\n    renderButton(label) {\r\n        return <button class=\"btn btn-primary\">{label}</button>\r\n    }\r\n\r\n    renderInput(name, label, type = \"text\") {\r\n        const { data } = this.state\r\n        return (\r\n            <Input\r\n                name={name}\r\n                value={data[name]}\r\n                label={label}\r\n                onChange={this.handleChange}\r\n            />\r\n        )\r\n    }\r\n\r\n    renderSelect(name, label, options) {\r\n        const { data } = this.state\r\n        return (\r\n            <Select\r\n                name={name}\r\n                value={data[name]}\r\n                label={label}\r\n                options={options}\r\n                onChange={this.handleChange}\r\n            />)\r\n    }\r\n}\r\nexport default FormInputs;","import React, { Component } from 'react';\r\n\r\nconst NotFound = () => {\r\n    return ( <div>Not Found</div> );\r\n}\r\n \r\nexport default NotFound;","import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <Link className=\"navbar-brand\" to=\"/\">Birds Watching Application</Link>\r\n\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n\r\n                <div className=\"navbar-nav\">\r\n                    <NavLink className=\"nav-item nav-link\" to=\"/observations\"> Observations </NavLink>\r\n                    <NavLink className=\"nav-item nav-link\" to=\"/form\"> Add New Observation </NavLink>\r\n                </div>\r\n\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\nimport Observations from './components/observations';\nimport Form from './components/form'\nimport NotFound from './components/notFound'\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport NavBar from './navBar';\n//import './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <NavBar />\n      <main className=\"container\">\n        <switch>\n          <Route path='/observations' component={Observations} />\n          <Route path='/form' component={Form} />\n          <Route path='/notFound' component={NotFound} />\n\n          <Redirect from='/' exact to='/observations' />\n        </switch>\n      </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"font-awesome/css/font-awesome.css\"\n\nReactDOM.render(\n        <BrowserRouter>\n        <App />\n        </BrowserRouter>, document.getElementById('root'));\n\n        \n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}