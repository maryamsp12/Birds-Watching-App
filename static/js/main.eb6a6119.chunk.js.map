{"version":3,"sources":["components/homePage.jsx","components/form.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","react_default","a","createElement","Fragment","className","Link","to","Component","Form","list","specie","specieName","addNotes","found","key","handleSubmit","e","preventDefault","timeStamp","Date","now","_this","concat","Object","toConsumableArray","setState","console","log","handleChange","objectSpread","currentTarget","name","value","createEntry","obs","onClick","handleDelete","filteredList","filter","this","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","localStorage","hasOwnProperty","getItem","JSON","parse","defineProperty","setItem","stringify","speciesList","map","style","margin","onSubmit","textAlign","htmlFor","id","onChange","placeholder","type","defaultValue","class","App","Switch","Route","path","component","exact","HomePage","Redirect","from","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb6a6119.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Home extends Component {\r\n    state = {}\r\n\r\n\r\n\r\n    render() { \r\n        \r\n        return ( \r\n            <React.Fragment>\r\n                <div className=\"App\">\r\n                    <header className=\"App-header\">\r\n                    <h1 className=\"App-title\">Birds Watching Application</h1>\r\n                    <button><Link to=\"/form\">Add New Observation</Link></button>\r\n                    </header>\r\n                   \r\n\r\n                    \r\n                \r\n                </div>\r\n                \r\n                \r\n                \r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Home","import React, { Component } from 'react';\r\n\r\n\r\n    class Form extends Component {\r\n        state = { \r\n            list : [],\r\n            specie: { specieName : '', addNotes : '', found : '', key : '' }\r\n            }\r\n\r\ncomponentDidMount() {\r\n    this.hydrateStateWithLocalStorage();            \r\n    // add event listener to save state to localStorage\r\n    // when user leaves/refreshes the page\r\n    window.addEventListener(\r\n    \"beforeunload\",\r\n    this.saveStateToLocalStorage.bind(this)) }\r\n\r\ncomponentWillUnmount() {\r\n    window.removeEventListener(\r\n    \"beforeunload\",\r\n    this.saveStateToLocalStorage.bind(this)\r\n    );\r\n    // saves if component has a chance to unmount\r\n    this.saveStateToLocalStorage();}\r\n\r\nhydrateStateWithLocalStorage() {\r\n    // for all items in state\r\n    for (let key in this.state) {\r\n    // if the key exists in localStorage\r\n    if (localStorage.hasOwnProperty(key)) {\r\n    // get the key's value from localStorage\r\n    let value = localStorage.getItem(key);\r\n    // parse the localStorage string and setState\r\n    try {\r\n    value = JSON.parse(value);\r\n    this.setState({ [key]: value });\r\n    } catch (e) {\r\n    // handle empty string\r\n    this.setState({ [key]: value }); }}}}\r\n\r\nsaveStateToLocalStorage() {\r\n    // for every item in React state\r\n    for (let key in this.state) {\r\n    // save to localStorage\r\n    localStorage.setItem(key, JSON.stringify(this.state[key]));}}\r\n\r\nupdateInput(key, value) {\r\n    // update react state\r\n    this.setState({ [key]: value });}\r\n\r\nhandleSubmit = (e) => {\r\ne.preventDefault()\r\nconst timeStamp = Date.now()\r\nconst specie = this.state.specie\r\nif (specie.specieName !== ''){\r\nconst list = [...this.state.list, specie]\r\nthis.setState({ list: list, \r\nspecie: {specieName: ' ', addNotes:' ', found:' ', key: timeStamp }}) } \r\nconsole.log(this.state.list)\r\n}\r\n\r\nhandleChange = (e) => {\r\nconst specie = {...this.state.specie}\r\nspecie[e.currentTarget.name] = e.currentTarget.value \r\nthis.setState({ specie : specie })}\r\n\r\ncreateEntry = obs => {\r\nreturn ( <table className=\"ui fixed table\">\r\n<tbody>\r\n<tr key={obs.key}>\r\n<td>{obs.specieName}</td>\r\n<td>{obs.addNotes}</td>\r\n<td>{obs.found}</td>\r\n<td><button onClick={()=>this.handleDelete(obs.key)}>Delete</button></td>\r\n</tr></tbody>\r\n</table>)}\r\n\r\nhandleDelete = key => {\r\nconst list = [...this.state.list]\r\nconst filteredList = list.filter( obs => {   return obs.key !== key     })\r\nthis.setState({list: filteredList})  } \r\n\r\n\r\n\r\nrender() { \r\n    const species = this.state.list\r\n    const speciesList = species.map(this.createEntry)\r\n\r\nreturn ( \r\n\r\n        <div className=\"container\">\r\n            <div style={{margin:'50px'}}>\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"ui inverted segment\">                \r\n                <div className=\"ui inverted form\">                \r\n                <div className=\"field\" style={{textAlign: 'center'}}><h1>Birds Observation Form</h1></div>\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"specieName\">Name</label>\r\n                        <input value={this.state.specieName} name=\"specieName\" id=\"specieName\" onChange={this.handleChange} placeholder=\"Name of Specie..\" type=\"text\" />\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"addNotes\">Add Notes</label>\r\n                        <textarea value={this.state.addNotes} name=\"addNotes\" id=\"addNotes\" onChange={this.handleChange} placeholder=\"Add Notes..\" type=\"text\" />\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <select  value={this.state.found} name=\"found\" onChange={this.handleChange} id=\"found\">\r\n                        <option value=\"extremelyRare\"> Extremely Rare </option>\r\n                        <option value=\"rare\"> Rare </option>\r\n                        <option defaultValue value=\"common\"> Common </option>\r\n                        </select>\r\n                    </div>\r\n                    <button className=\"ui submit button field\">Save</button>\r\n                </div></div></form>      \r\n            </div>\r\n           \r\n            \r\n            <div>\r\n                    \r\n                    <h1 style={{textAlign:'center'}}>YOUR SIGHTINGS</h1>\r\n       \r\n                       <div>\r\n                       <table class=\"ui fixed table\">\r\n                       <thead >\r\n                       <tr><th>Name</th>\r\n                       <th>Found</th>\r\n                       <th>Description</th>\r\n                       <th></th>\r\n                       </tr>\r\n                       </thead>\r\n                       </table>\r\n                       {speciesList}</div>\r\n                       \r\n                    </div>\r\n           \r\n\r\n        </div>\r\n         );\r\n    }}\r\n\r\n \r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom'\nimport HomePage from './components/homePage'\nimport Form from './components/form'\n\nimport './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n\n      <div className=\"container\">      \n\n       <Switch>\n        <Route path=\"/form\" component={Form} />\n        <Route path=\"/\" exact component={HomePage} />\n        \n        \n        <Redirect from=\"/\" exact to=\"/homePage\" />\n        \n        \n        </Switch>\n       \n      \n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <BrowserRouter>\n        <App />\n        </BrowserRouter>, document.getElementById('root'));\n\n        \n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}